<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kasei.mybatis.module1.a01entity.UserMpper">
    
    <!--
        OGNL 官方文档: https://commons.apache.org/proper/commons-ognl/language-guide.html

        MyBatis 可以使用 OGNL 表达式的地方：        
            1. <if test="OGNL">
            2. <select><bind value="OGNL"></select>
            3. ${OGNL}
    -->

    <!--
        UserMapper 中各种参数类型在 Mapper.xml 中的写法，
        @trap 如果参数是 primitive/array/list，那么 xml 中 parameterType 属性可以不写
    
        func(String str)                                        #{value}                    // int long boolean 类似
        func(Integer i, String str)                             #{param1}, #{param2}        // 不推荐
        func(@Param("i") Integer i, @Param("str") String str)   #{i}, #{str}                // 推荐
        func(String[] aa)                                       foreach collection="array"  // Mybatis 内部自动封装成 Map，并设置 key 为 array 所以这里必须是 array
        func(List aa)                                           foreach collection="list"   // Mybatis 内部自动封装成 Map，并设置 key 为 list 所以这里必须是 list
        func(Set aa)                                            foreach                     // 无对应值，需要用 @Param("set") 封装成 Map, 所以 Mapper.java 中最好不要用 Set 当作参数
        func(Map map)                                           foreach collection="key"
        func(Object obj)                                        foreach collection="field"
    -->

    <!-- 增 -->
    <insert id="insert" parameterType="com.kasei.mybatis.module1.a01entity.User">
        <selectKey keyProperty="id" resultType="java.lang.Integer" order="AFTER">
            select last_insert_id()
        </selectKey>
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id, </if>
            <if test="name != null">name, </if>
            <if test="age != null">age, </if>
        </trim>
        <trim prefix="values(" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id}, </if>
            <if test="name != null">#{name}, </if>
            <if test="age != null">#{age}, </if>
        </trim>
    </insert>


    <!-- 删 -->
    <delete id="delete" parameterType="com.kasei.mybatis.module1.a01entity.User">
        delete from user
        <where>
            <if test="id != null">and id=#{id} </if>
            <if test="name != null">and name=#{name} </if>
            <if test="age != null">and age=#{age} </if>
        </where>
    </delete>


    <!-- 改 -->
    <update id="update" parameterType="java.util.Map">
        update user
        <set>
            <if test="value.id != null">id=#{value.id}, </if>
            <if test="value.name != null">name=#{value.name}, </if>
            <if test="value.age != null">age=#{value.age}, </if>
        </set>
        <where>
            <if test="condition.id != null">and id=#{condition.id}</if>
            <if test="condition.name != null">and name=#{condition.name}</if>
            <if test="condition.age != null">and age=#{condition.age}</if>
        </where>
    </update>


    <!-- 查 -->
    <select id="select"
            parameterType="com.kasei.mybatis.module1.a01entity.User"
            resultType="com.kasei.mybatis.module1.a01entity.User">
        <!-- 这里 属性值 用 单引号 和 双引号 都可以，这里用 单引号 是因为 值里面有 双引号 -->
        <bind name="OGNLValue" value='@java.util.UUID@randomUUID().toString().replace("-", "")'/>
        select * from user
        <where>
            <if test="id != null">and id=#{id} </if>
            <if test="name != null">and name=#{name} </if>
            <if test="age != null">and age=#{age} </if>
        </where>
        <if test="paginate">
            limit ${(pageNum - 1) * pageSize}, #{pageSize}
        </if>
    </select>


    <!-- 批量增 -->
    <insert id="batchInsert" parameterType="java.util.List">
        <selectKey resultType ="java.lang.Integer" keyProperty= "id" order= "AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey >
        insert into card(
            id,
            serial_number,
            balance,
            active,
            create_time
        )
        <foreach collection="list" open="values" separator="," item="item">
            (
                #{item.id},
                #{item.serial_number},
                #{item.balance},
                #{item.active},
                #{item.create_time}
            )
        </foreach>
    </insert>


    <!-- 批量删 -->
    <delete id="delete" parameterType="java.util.Map">
        delete from user
        <where>
            <if test="idList!=null and idList.size()>0">
                <foreach collection="idList" open="(" close=")" separator="," item="id">
                    #{id}
                </foreach>
            </if>
            <if test="nameList!=null and nameList.size()>0">
                <foreach collection="nameList" open="(" close=")" separator="," item="name">
                    #{name}
                </foreach>
            </if>
            <if test="age!=null and ageList.size()>0">
                <foreach collection="ageList" open="(" close=")" separator="," item="age">
                    #{age}
                </foreach>
            </if>
        </where>
    </delete>



    <!-- 批量改 -->
    <update id="update" parameterType="java.util.Map">
        update user
        <set>
            <if test="value.id!=null">id=#{value.id}, </if>
            <if test="value.name!=null">name=#{value.name}, </if>
            <if test="value.age!=null">age=#{value.age}, </if>
        </set>
        <where>
            <if test="condition.idList!=null and condition.idList.size()>0">
                <foreach collection="condition.idList" open="(" close=")" separator="," item="id">
                    #{id}
                </foreach>
            </if>
            <if test="condition.nameList!=null and condition.nameList.size()>0">
                <foreach collection="condition.nameList" open="(" close=")" separator="," item="name">
                    #{name}
                </foreach>
            </if>
            <if test="condition.ageList!=null and condition.ageList.size()>0">
                <foreach collection="condition.ageList" open="(" close=")" separator="," item="age">
                    #{age}
                </foreach>
            </if>
        </where>
    </update>


    <!-- 批量查：注意日期类型 -->
    <select id="batchSelect" parameterType="Map" resultType="com.kasei.mybatis.module1.a01entity.User">
        select * from user
        <where>
            <if test="idList!=null and idList.size()>0">
                <foreach collection="idList" open="(" close=")" separator="," item="id">
                    #{id}
                </foreach>
            </if>
            <if test="nameList!=null and nameList.size()>0">
                <foreach collection="nameList" open="(" close=")" separator="," item="name">
                    #{name}
                </foreach>
            </if>
            <if test="age!=null and ageList.size()>0">
                <foreach collection="ageList" open="(" close=")" separator="," item="age">
                    #{age}
                </foreach>
            </if>
        </where>
    </select>

    
    <resultMap id="rmId" type="a.b.c.JavaCls" autoMapping="override global auto mapping">
        <!--
            当 JavaBean 没有空构造函数时，需要使用该标签，调用对应的构造函数来创建实例
        -->
        <constructor>
            <!--
                column: sql 返回结果中的列名
                javaType: mybatis 无法确定转换类型时，需要指定，比如：使用 HashMap 接收
                jdbcType: 在 insert, update or delete 语句中，当值为 null 时，mybatis 无法判断数据库的类型，所以需要指定
                typeHandler: JavaType 和 JdbcType 的类型转换器
                name: 构造函数参数名，指定该字段，允许你使用任何顺序指定构造函数的参数
                select: Nested Select for Association 方式查询时，用于指定其他 selectId
                resultMap: Nested Results for Association 方式查询时，用于指定其他 resultMap
            -->
            <idArg column="" javaType="" jdbcType="" name="" select="" resultMap="" typeHandler=""/>
            <arg column="" javaType="" jdbcType="" name="" select="" resultMap="" typeHandler=""/>
        </constructor>
        
        <!--
            property: Java Bean Field Name
            column: sql 返回结果中的列名
            javaType: mybatis 无法确定转换类型时，需要指定，比如：使用 HashMap 接收
            jdbcType: 在 insert, update or delete 语句中，当值为 null 时，mybatis 无法判断数据库的类型，所以需要指定
            typeHandler: JavaType 和 JdbcType 的类型转换器
        -->
        <id property="id" column="post_id" javaType="" jdbcType="" typeHandler=""/>
        <result property="subject" column="post_subject"/>
        
        <!-- 一对一关联：单向。方式零：使用级联属性 -->
        <result column="card_id" property="idCard.id"/> <!-- 将结果集中 card_id 字段的内容，塞入到 a.b.c.JavaCls#idCard 字段上 DTO 的 id 字段上 -->
        <result column="card_num" property="idCard.number"/>
        <result column="card_expired_time" property="idCard.expiredTime"/>

        <!-- Nested Select for Association 
            column: 用于嵌套查询的关联的列名，如果是 复合主键(composite keys) 那么格式如下: column="{prop1=col1,prop2=col2}"
            select: 指定用于嵌套查询的 selectId
            fetchType: 获取类型，覆盖全局 lazyLoadingEnabled 的配置
            注意: 存在 1+N 的问题，
            坑: 获取结果 list , 立即访问嵌套内容，这样会加载所有 lazy load 的数据，因此性能会非常糟糕
        -->
        <association property="" javaType="" jdbcType="" typeHandler="" column="" select="" fetchType="eager">
            <result property="" column=""/>
        </association>

        <!-- Nested Results for Association 
           columnPrefix: 列名前缀
           notNullColumn: 默认至少有一列有值，就会创建对象；该属性可以配置 指定的 columns 有值时，才创建对象
           resultMap: 指定另一个 resultMap 来映射嵌套对象
           autoMapping: 覆盖全局配置的 autoMapping
        -->
        <association property="" javaType="" jdbcType="" typeHandler="" columnPrefix="" notNullColumn="col1,col2" resultMap="" autoMapping="" >
            <result property="" column=""/>
        </association>

        <!-- Multiple ResultSets for Association 
            一次性返回多个 结果集 的查询，一般用在调用 存储过程 或 函数 时，才有多个结果集
            column: 外层列名，用于跟 foreignColumn 对应
            foreignColumn: 嵌套类型的列名
            resultSet: 指定使用哪一个 resultSet
        -->
        <association property="" javaType="" jdbcType="" typeHandler="" column="" foreignColumn="col1,col2" resultSet="">
            <result property="" column=""/>
        </association>

        <!-- 和 association 没有任何区别，除了使用 ofType 来指定 Java 类型 -->
        <collection property="" ofType="">
            <result property="" column=""/>
        </collection>
        
        <!--类有继承关系，通过指定字段，来映射到不同的子类
            不同的子类有不同的字段
        -->
        <discriminator javaType="int" column="vehicle_type" jdbcType="" typeHandler="">
            <case value="1" resultType="Car">
                <result property="doorCount" column="door_count" />
            </case>
            <case value="2" resultType="Truck">
                <result property="boxSize" column="box_size" />
                <result property="extendedCab" column="extended_cab" />
            </case>
            <case value="3" resultType="Van">
                <result property="powerSlidingDoor" column="power_sliding_door" />
            </case>
        </discriminator>

    </resultMap>

</mapper>
